{%- set db_tag = 'post' in cookiecutter.db_mode and 'postgres' or cookiecutter.db_mode -%}
version: '3.7'
x-images:
  env: &env {env_file: [.env, docker.env]}
  {{cookiecutter.app_type}}: &{{cookiecutter.app_type}}
    <<: [ *env ]
    tty: true
    # latest image is only used in prod (without dev & test tools)
    image: "${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE}:${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}-dev"
    environment: &flask_env
      FLASK_WSGI: "${FLASK_WSGI:-{{cookiecutter.flask_project_name}}.wsgi}"
      FLASK_WSGI: "${FLASK_WSGI:-{{cookiecutter.flask_project_name}}.wsgi}"
      FLASK_SETTINGS_MODULE: "${FLASK_SETTINGS_MODULE:-{{cookiecutter.flask_settings}}}"
    depends_on:
    - db
    - redis
    - setup-{{db_tag}}
    working_dir: /code/src
    command:
    - /bin/sh
    - '-c'
    - >-
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-45s}
      && dockerize -wait http://setup-{{db_tag}} -timeout $${POSTGRES_STARTUP_TIMEOUT}
      && /init.sh
    volumes:
      {%- if not cookiecutter.remove_cron %}
      - ./crontab:/code/sys/etc/cron.d/{{cookiecutter.app_type}}.frep
      {%- endif %}
      - ./src/{{cookiecutter.flask_settings.replace('.', '/')}}/instances:/code/src/{{cookiecutter.flask_settings.replace('.', '/')}}/instances
      - logs:/logs/
services:
  mailcatcher:
    <<: [ *env ]
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
  redis:
    <<: [ *env ]
    image: "{{cookiecutter.redis_image}}"
    hostname: redis
    volumes:
      - 'redis:/data'
  db:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    volumes:
      - postgresql:/var/lib/postgresql/data
  nginx:
    <<: [ *env ]
    image: "{{cookiecutter.nginx_image}}"
    depends_on:
      - {{cookiecutter.app_type}}
    volumes:
      - ./sys/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
      - logs:/logs/
      - nginx-certs:/certs
    command:
      - sh
      - '-ec'
      - |-
        export FLASK__HTTP_PROTECT_USER=$${FLASK__HTTP_PROTECT_USER:-root}
        export FLASK__HTTP_PROTECT_PASSWORD=$${FLASK__HTTP_PROTECT_PASSWORD-}
        touch /etc/htpasswd-protect
        chmod 644 /etc/htpasswd-protect
        if [ "x$$FLASK__HTTP_PROTECT_PASSWORD" != "x" ];then
          echo "/ htpasswd:">&2
          echo "$$FLASK__HTTP_PROTECT_PASSWORD"\
          | htpasswd -bim /etc/htpasswd-protect "$$FLASK__HTTP_PROTECT_USER"
        fi
        v=/etc/nginx/conf.d/default.conf
        frep $${v}.template:$${v} --overwrite
        exec /bin/supervisord.sh
    environment:
    - SUPERVISORD_CONFIGS=/etc/supervisor.d/cron /etc/supervisor.d/nginx /etc/supervisor.d/rsyslog
  {{cookiecutter.app_type}}:
    <<: [ *{{cookiecutter.app_type}} ]
  {%- if not cookiecutter.remove_cron %}
  cron:
    <<: [ *{{cookiecutter.app_type}} ]
    environment:
      <<: [ *flask_env ]
      IMAGE_MODE: cron
    depends_on:
    - {{cookiecutter.app_type}}
  {%-endif%}
  backup:
    <<: [ *env ]
    image: "{{cookiecutter.dbsmartbackup_image}}"
    volumes:
      - backupdb-dumps:/var/db_smart_backup/
      - backupdb-logs:/var/db_smart_backup/logs/
{% if db_tag == 'postgres' %}  setup-postgres:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-45s}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "{% if 'gis' in cookiecutter.db_mode%}select 1 from spatial_ref_sys limit 1;select postgis_version();{%else%}select 1{%endif%}"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@db/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout $${POSTGRES_STARTUP_TIMEOUT} \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
{% endif %}
volumes:
  backupdb-logs:
  backupdb-dumps:
  postgresql:
  redis:
  nginx-certs:
  logs:
  mails:
